Instructions for running the programming:
    - extract zip file
    - open terminal in project directory
    - enter the following commands 
        make
        ./sim_1 <config file name>
    - example config_1.conf and Test_1a.mdf are provided in the project directory 

Note: Only file names without any space in between, separated by a single '.' and having appropriate extension is a valid file name

....................................................................................................
For project 2, I built upon previous work in following ways:
    - Printing configuration file and Metadata file content was disabled (as per output requirement)
    - The program parses the metadata object created by parsing the Metadata object
    - Output is logged in real time
    - Output time is in Seconds with accuracy of 6 digits after decimal point (microseconds)
    - All internal Timing calculation is done in microseconds
    - Since cycle times are in milliseconds they are first converted to microseconds.
    - Accuracy was calculated using the following formula:
        
            overhead in microseconds = (action end time - action start time - real cycle time)/1000
      
      the resulting value was always less than 1.0 meaning the accuracy is at least in the range of milliseconds.

....................................................................................................
Architecture Development:
    - PCB.h contains a PCB struct. It holds the process status as well as pid. 
    - Timer.c contains all functions for timing. There is a function to get the current time as well to start a timer. starting a timer creates a new thread that counts down to 0. It can be passed a callback function as a function pointer that it will call once the timer reaches 0. However this feature wasn't required for the current state of the project.
    - IO.c and Memory.c hosts functions that are to be called once we want to do operation relating to IO and memory. the io functions are there to create an input and output thread which in turn creates a timer thread. Since no real IO operation is taking place ( we are just waiting x microseconds, different functions for different IO hardwares weren't created. They can obviously be implemented if the need arises in the future.
    - Memory allocation is done by selecting a random number between 0 and memory size. Memory size can be given in kbytes, Mbytes or Gbytes. 

....................................................................................................
PCB state change:
    
      ACTION , FILENAME , LINE NUMBER
----------------------------------------------------------------------------------------------------
    - PCB created: Simulator.c, line 133
    ------------------------------------
    - START : Simulator.c, line 134
    - READY : Simulator.c, line 138
    - RUNNING: 
        First time: Simulator.c, line 154
        Every time waiting ends: Simulator.c, line 163, 177, 192, 209, 228
    - WAITING:
        Every time before main thread will wait for a child thread to return: Simulator.c, line 161, 175, 190, 207, 226
    - EXIT:
        When process finishes: Simulator.c, line 146
        PCB memory is also deallocated
